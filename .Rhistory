}
if(verbose){
cat("UPDATED MATRIX:\n")
print(augmatrix)
cat("\n")
}
cnt = cnt+1
}
xs = augmatrix[, lenCol]                                            #unknown values would be the remaining values after elimination, in the right hand side
forelem = augmatrix
if(verbose){
cat("------------------------- RESULT ------------------------\n")
cat("X VALUES:\n")
print(xs)
cat("\n")
cat("--------------- MATRIX AFTER ELIMINATION ----------------\n")
print(forelem)
cat("\n")
}
print(augmatrix)
gaussjordanResult <- list(forelem = forelem, xs = xs)               #creates a list of the matrix and the unknown values
return (gaussjordanResult)                                          #return result
}
###############################################################################
#DATA
eq1 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 310)
eq2 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 260)
eq3 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 280)
eq4 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -180)
eq5 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -80)
eq6 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -200)
eq7 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -160)
eq8 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -220)
eq9 = c(-10,-6,-3, -8,-5,-4, -6,-4,-5, -5,-3,-5, -4,-6,-9, 0,0,0,0,0,0,0,0,1, 0)
#tab = CreateTableu(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9)
#res = GaussJordan(tab, FALSE)
eq11 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 200)
eq12 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 200)
eq13 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 200)
eq14 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -100)
eq15 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -100)
eq16 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -100)
eq17 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -100)
eq18 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -100)
eq19 = c(-5,-6,-3, -6,-7,-5, -7,-8,-7, -8,-9,-11, -9,-10,-13, 0,0,0,0,0,0,0,0,1, 0)
tab1 = CreateTableu(eq11, eq12, eq13, eq14, eq15, eq16, eq17, eq18, eq19)
res1 = GaussJordan(tab1, FALSE)
a = c(10,6,3,8,5,4,6,4,5,5,3,5,4,6,9)
A11 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0)
A12 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0)
A13 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1)
b1 = c(310, 260, 280)
A21 = c(1,1,1,0,0,0,0,0,0,0,0,0,0,0,0)
A22 = c(0,0,0,1,1,1,0,0,0,0,0,0,0,0,0)
A23 = c(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0)
A24 = c(0,0,0,0,0,0,0,0,0,1,1,1,0,0,0)
A25 = c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1)
b2 = c(180, 80, 200, 160, 220)
#truevalue = simplex(a, A1=rbind(A11,A12,A13), b1=b1, A2=rbind(A21,A22,A23,A24,A25), b2=b2, A3=NULL, b3=NULL, maxi=FALSE)
#print(truevalue)
#
# GOJO CRUZ, Jamlech Iram N.
# CMSC150 - Exercise 06
# REGRESSION
# October 05, 2019 | 8:52PM | UPLB
#
M = 10000
col_cnt = 25
CreateTableu <- function(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9){
tableau = matrix(c(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9), nrow=9, ncol=col_cnt, byrow=TRUE,
dimnames=list(c(1:9), c("Ax", "Ay", "Az", "Bx", "By", "Bz", "Cx", "Cy", "Cz", "Dx", "Dy", "Dz", "Ex", "Ey", "Ez",
"S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "Z", "Solution")))
print(tableau)
# i=1
# while(i<=30){
#    tableau[9, i] = tableau[9, i] + ((-M)*tableau[4,i] + (-M)*tableau[5,i] + (-M)*tableau[6,i] + (-M)*tableau[7,i] + (-M)*tableau[8,i])
#    i = i+1
# }
# print(tableau)
return(tableau)
}
ComputeTestRatio <- function(tableau){
minValue = 0
minIndex = 0
i = 1
while(i <= nrow(tableau)){
if(tableau[i, ncol(tableau)] < minValue){
minValue = tableau[i, ncol(tableau)]
minIndex = i
}
i = i+1
}
print(minValue)
ratio = c()
j = 1
while(j <= ncol(tableau)-1){
if(tableau[minIndex, j] != 0 || tableau[minIndex, j] < 0){
quotient = tableau[nrow(tableau), j] / tableau[minIndex, j]
}
else{
quotient = 99999
}
ratio = c(ratio, quotient)
j = j+1
}
print(ratio)
pivotElement = min(which(ratio==min(ratio[ratio>0])))
print("ROW")
print(minIndex)
print("COL")
print(pivotElement)
pivot = list(pcol=pivotElement, prow=minIndex)
}
#========================= GAUSS-JORDAN =========================#
#NORMALIZATION
Normalize <- function(mat, pivotRow, pivotCol){
temp=1
divisor = mat[pivotRow, pivotCol]                                   #get the divisor
while(temp <= ncol(mat)){
mat[pivotRow, temp] = mat[pivotRow, temp] / divisor               #divide the divisor/element in the diagonal to the pivot row
temp = temp+1
}
return (mat)
}
#GAUSS-JORDAN                                                         #almost the same function as Gaussian, except other implementations
GaussJordan <- function(f, verbose){
augmatrix = f                                                         #get the augmented coefficient matrix
j=1; lenRow = nrow(augmatrix); lenCol = ncol(augmatrix); cnt=1
if(verbose){
cat("AUGMENTED COEFFICIENT MATRIX:\n")
print(augmatrix)
cat("\n")
}
while(sum(augmatrix[ ,lenCol] < 0)){
print(augmatrix)
tr = ComputeTestRatio(augmatrix)
pivotRow = tr$prow
pivotCol = tr$pcol
if(verbose){
cat("----------------------- ITERATION -----------------------\n")
cat("PIVOTING:\n")
print(augmatrix)
cat("\n")
}
augmatrix = Normalize(augmatrix, pivotRow, pivotCol)                            #normalize the pizot row
if(verbose){
cat("NORMALIZE:\n")
print(augmatrix)
cat("\n")
}
i=1
while(i <= lenRow){
print("ITERATION")
print(i)
if(i!=pivotRow){                                                       #if the row is not equal to the column number, then it is not in the main diagonal
k=1
tempvector = c()
while(k <= lenCol){
if(k!=pivotCol){
multiplier = augmatrix[pivotRow,k]
if(verbose){
cat("MULTIPLIER:\n")
print(multiplier)
cat("\n")
}
augmatrix[i,k] = augmatrix[i,k] - multiplier * augmatrix[i,pivotCol] #oldValue - (element in same col but in pivot row * same row but pivot col)
#tempvector = c(tempvector, multiplier * augmatrix[i,pivotCol])
}
k = k+1
}
multiplier = augmatrix[pivotRow,pivotCol]
augmatrix[i,pivotCol] = augmatrix[i,pivotCol] - multiplier * augmatrix[i,pivotCol]
}
i = i+1
}
if(verbose){
cat("UPDATED MATRIX:\n")
print(augmatrix)
cat("\n")
}
cnt = cnt+1
}
xs = augmatrix[, lenCol]                                            #unknown values would be the remaining values after elimination, in the right hand side
forelem = augmatrix
if(verbose){
cat("------------------------- RESULT ------------------------\n")
cat("X VALUES:\n")
print(xs)
cat("\n")
cat("--------------- MATRIX AFTER ELIMINATION ----------------\n")
print(forelem)
cat("\n")
}
print(augmatrix)
gaussjordanResult <- list(forelem = forelem, xs = xs)               #creates a list of the matrix and the unknown values
return (gaussjordanResult)                                          #return result
}
###############################################################################
#DATA
eq1 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 310)
eq2 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 260)
eq3 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 280)
eq4 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -180)
eq5 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -80)
eq6 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -200)
eq7 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -160)
eq8 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -220)
eq9 = c(-10,-6,-3, -8,-5,-4, -6,-4,-5, -5,-3,-5, -4,-6,-9, 0,0,0,0,0,0,0,0,1, 0)
tab = CreateTableu(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9)
res = GaussJordan(tab, FALSE)
eq11 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 200)
eq12 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 200)
eq13 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 200)
eq14 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -100)
eq15 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -100)
eq16 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -100)
eq17 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -100)
eq18 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -100)
eq19 = c(-5,-6,-3, -6,-7,-5, -7,-8,-7, -8,-9,-11, -9,-10,-13, 0,0,0,0,0,0,0,0,1, 0)
#tab1 = CreateTableu(eq11, eq12, eq13, eq14, eq15, eq16, eq17, eq18, eq19)
#res1 = GaussJordan(tab1, FALSE)
a = c(10,6,3,8,5,4,6,4,5,5,3,5,4,6,9)
A11 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0)
A12 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0)
A13 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1)
b1 = c(310, 260, 280)
A21 = c(1,1,1,0,0,0,0,0,0,0,0,0,0,0,0)
A22 = c(0,0,0,1,1,1,0,0,0,0,0,0,0,0,0)
A23 = c(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0)
A24 = c(0,0,0,0,0,0,0,0,0,1,1,1,0,0,0)
A25 = c(0,0,0,0,0,0,0,0,0,0,0,0,1,1,1)
b2 = c(180, 80, 200, 160, 220)
#truevalue = simplex(a, A1=rbind(A11,A12,A13), b1=b1, A2=rbind(A21,A22,A23,A24,A25), b2=b2, A3=NULL, b3=NULL, maxi=FALSE)
#print(truevalue)
shiny::runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
shiny::runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
install.packages("rhandsontable")
#
# GOJO CRUZ, Jamlech Iram N.
# CMSC150 - Exercise 06
# REGRESSION
# October 05, 2019 | 8:52PM | UPLB
#
M = 10000
col_cnt = 25
CreateTableu <- function(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9){
tableau = matrix(c(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9), nrow=9, ncol=col_cnt, byrow=TRUE,
dimnames=list(c(1:9), c("Ax", "Ay", "Az", "Bx", "By", "Bz", "Cx", "Cy", "Cz", "Dx", "Dy", "Dz", "Ex", "Ey", "Ez",
"S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "Z", "Solution")))
print(tableau)
# i=1
# while(i<=30){
#    tableau[9, i] = tableau[9, i] + ((-M)*tableau[4,i] + (-M)*tableau[5,i] + (-M)*tableau[6,i] + (-M)*tableau[7,i] + (-M)*tableau[8,i])
#    i = i+1
# }
# print(tableau)
return(tableau)
}
ComputeTestRatio <- function(tableau){
minValue = 0
minIndex = 0
i = 1
while(i <= nrow(tableau)){
if(tableau[i, ncol(tableau)] < minValue){
minValue = tableau[i, ncol(tableau)]
minIndex = i
}
i = i+1
}
print(minValue)
ratio = c()
j = 1
while(j <= ncol(tableau)-1){
if(tableau[minIndex, j] != 0 || tableau[minIndex, j] < 0){
quotient = tableau[nrow(tableau), j] / tableau[minIndex, j]
}
else{
quotient = 99999
}
ratio = c(ratio, quotient)
j = j+1
}
print(ratio)
pivotElement = min(which(ratio==min(ratio[ratio>0])))
print("ROW")
print(minIndex)
print("COL")
print(pivotElement)
pivot = list(pcol=pivotElement, prow=minIndex)
}
#========================= GAUSS-JORDAN =========================#
#NORMALIZATION
Normalize <- function(mat, pivotRow, pivotCol){
temp=1
divisor = mat[pivotRow, pivotCol]                                   #get the divisor
while(temp <= ncol(mat)){
mat[pivotRow, temp] = mat[pivotRow, temp] / divisor               #divide the divisor/element in the diagonal to the pivot row
temp = temp+1
}
return (mat)
}
#GAUSS-JORDAN                                                         #almost the same function as Gaussian, except other implementations
GaussJordan <- function(f, verbose){
augmatrix = f                                                         #get the augmented coefficient matrix
j=1; lenRow = nrow(augmatrix); lenCol = ncol(augmatrix); cnt=1
if(verbose){
cat("AUGMENTED COEFFICIENT MATRIX:\n")
print(augmatrix)
cat("\n")
}
while(sum(augmatrix[ ,lenCol] < 0)){
print(augmatrix)
tr = ComputeTestRatio(augmatrix)
pivotRow = tr$prow
pivotCol = tr$pcol
if(verbose){
cat("----------------------- ITERATION -----------------------\n")
cat("PIVOTING:\n")
print(augmatrix)
cat("\n")
}
augmatrix = Normalize(augmatrix, pivotRow, pivotCol)                            #normalize the pizot row
if(verbose){
cat("NORMALIZE:\n")
print(augmatrix)
cat("\n")
}
i=1
while(i <= lenRow){
print("ITERATION")
print(i)
if(i!=pivotRow){                                                       #if the row is not equal to the column number, then it is not in the main diagonal
k=1
tempvector = c()
while(k <= lenCol){
if(k!=pivotCol){
multiplier = augmatrix[pivotRow,k]
if(verbose){
cat("MULTIPLIER:\n")
print(multiplier)
cat("\n")
}
augmatrix[i,k] = augmatrix[i,k] - multiplier * augmatrix[i,pivotCol] #oldValue - (element in same col but in pivot row * same row but pivot col)
#tempvector = c(tempvector, multiplier * augmatrix[i,pivotCol])
}
k = k+1
}
multiplier = augmatrix[pivotRow,pivotCol]
augmatrix[i,pivotCol] = augmatrix[i,pivotCol] - multiplier * augmatrix[i,pivotCol]
}
i = i+1
}
if(verbose){
cat("UPDATED MATRIX:\n")
print(augmatrix)
cat("\n")
}
cnt = cnt+1
}
xs = augmatrix[, lenCol]                                            #unknown values would be the remaining values after elimination, in the right hand side
forelem = augmatrix
if(verbose){
cat("------------------------- RESULT ------------------------\n")
cat("X VALUES:\n")
print(xs)
cat("\n")
cat("--------------- MATRIX AFTER ELIMINATION ----------------\n")
print(forelem)
cat("\n")
}
print(augmatrix)
gaussjordanResult <- list(forelem = forelem, xs = xs)               #creates a list of the matrix and the unknown values
return (gaussjordanResult)                                          #return result
}
###############################################################################
#DATA FROM PROJECT
eq1 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 310)
eq2 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 260)
eq3 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 280)
eq4 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -180)
eq5 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -80)
eq6 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -200)
eq7 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -160)
eq8 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -220)
eq9 = c(-10,-6,-3, -8,-5,-4, -6,-4,-5, -5,-3,-5, -4,-6,-9, 0,0,0,0,0,0,0,0,1, 0)
tab = CreateTableu(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9)
res = GaussJordan(tab, FALSE)
#TEST DATA 1
eq11 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 200)
eq12 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 200)
eq13 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 200)
eq14 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -100)
eq15 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -100)
eq16 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -100)
eq17 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -100)
eq18 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -100)
eq19 = c(-5,-6,-3, -6,-7,-5, -7,-8,-7, -8,-9,-11, -9,-10,-13, 0,0,0,0,0,0,0,0,1, 0)
#tab1 = CreateTableu(eq11, eq12, eq13, eq14, eq15, eq16, eq17, eq18, eq19)
#res1 = GaussJordan(tab1, FALSE)
#TEST DATA 2
eq21 = c(1,0,0,1,0,0,1,0,0,1,0,0,1,0,0, 1,0,0,0,0,0,0,0,0, 200)
eq22 = c(0,1,0,0,1,0,0,1,0,0,1,0,0,1,0, 0,1,0,0,0,0,0,0,0, 200)
eq23 = c(0,0,1,0,0,1,0,0,1,0,0,1,0,0,1, 0,0,1,0,0,0,0,0,0, 200)
eq24 = c(-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,1,0,0,0,0,0, -100)
eq25 = c(0,0,0,-1,-1,-1,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,0,0,0,0, -100)
eq26 = c(0,0,0,0,0,0,-1,-1,-1,0,0,0,0,0,0, 0,0,0,0,0,1,0,0,0, -100)
eq27 = c(0,0,0,0,0,0,0,0,0,-1,-1,-1,0,0,0, 0,0,0,0,0,0,1,0,0, -100)
eq28 = c(0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1, 0,0,0,0,0,0,0,1,0, -100)
eq29 = c(-5,-6,-3, -6,-7,-5, -7,-8,-7, -8,-9,-11, -9,-10,-13, 0,0,0,0,0,0,0,0,1, 0)
#tab1 = CreateTableu(eq11, eq12, eq13, eq14, eq15, eq16, eq17, eq18, eq19)
#res1 = GaussJordan(tab1, FALSE)
library(rhandsontable)
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp()
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
install.packages("shinythemes")
shiny::runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
install_github("nik01010/dashboardthemes")
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
install.packages("devtools")
runApp('C:/Users/Jamlech/Desktop/CMSC150/Project')
shiny::runApp()
